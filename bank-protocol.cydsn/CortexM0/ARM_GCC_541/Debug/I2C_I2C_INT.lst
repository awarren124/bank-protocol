ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"I2C_I2C_INT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.I2C_I2C_ISR,"ax",%progbits
  20              		.align	2
  21              		.global	I2C_I2C_ISR
  22              		.code	16
  23              		.thumb_func
  24              		.type	I2C_I2C_ISR, %function
  25              	I2C_I2C_ISR:
  26              	.LFB1:
  27              		.file 1 "Generated_Source\\PSoC4\\I2C_I2C_INT.c"
   1:Generated_Source\PSoC4/I2C_I2C_INT.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/I2C_I2C_INT.c **** * \file I2C_I2C_INT.c
   3:Generated_Source\PSoC4/I2C_I2C_INT.c **** * \version 4.0
   4:Generated_Source\PSoC4/I2C_I2C_INT.c **** *
   5:Generated_Source\PSoC4/I2C_I2C_INT.c **** * \brief
   6:Generated_Source\PSoC4/I2C_I2C_INT.c **** *  This file provides the source code to the Interrupt Service Routine for
   7:Generated_Source\PSoC4/I2C_I2C_INT.c **** *  the SCB Component in I2C mode.
   8:Generated_Source\PSoC4/I2C_I2C_INT.c **** *
   9:Generated_Source\PSoC4/I2C_I2C_INT.c **** * Note:
  10:Generated_Source\PSoC4/I2C_I2C_INT.c **** *
  11:Generated_Source\PSoC4/I2C_I2C_INT.c **** ********************************************************************************
  12:Generated_Source\PSoC4/I2C_I2C_INT.c **** * \copyright
  13:Generated_Source\PSoC4/I2C_I2C_INT.c **** * Copyright 2013-2017, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/I2C_I2C_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/I2C_I2C_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/I2C_I2C_INT.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/I2C_I2C_INT.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  19:Generated_Source\PSoC4/I2C_I2C_INT.c **** #include "I2C_PVT.h"
  20:Generated_Source\PSoC4/I2C_I2C_INT.c **** #include "I2C_I2C_PVT.h"
  21:Generated_Source\PSoC4/I2C_I2C_INT.c **** #include "cyapicallbacks.h"
  22:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  23:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  24:Generated_Source\PSoC4/I2C_I2C_INT.c **** /*******************************************************************************
  25:Generated_Source\PSoC4/I2C_I2C_INT.c **** * Function Name: I2C_I2C_ISR
  26:Generated_Source\PSoC4/I2C_I2C_INT.c **** ****************************************************************************//**
  27:Generated_Source\PSoC4/I2C_I2C_INT.c **** *
  28:Generated_Source\PSoC4/I2C_I2C_INT.c **** *  Handles the Interrupt Service Routine for the SCB I2C mode.
  29:Generated_Source\PSoC4/I2C_I2C_INT.c **** *
  30:Generated_Source\PSoC4/I2C_I2C_INT.c **** *******************************************************************************/
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 2


  31:Generated_Source\PSoC4/I2C_I2C_INT.c **** CY_ISR(I2C_I2C_ISR)
  32:Generated_Source\PSoC4/I2C_I2C_INT.c **** {
  28              		.loc 1 32 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  36              	.LVL0:
  33:Generated_Source\PSoC4/I2C_I2C_INT.c ****     uint32 diffCount;
  34:Generated_Source\PSoC4/I2C_I2C_INT.c ****     uint32 endTransfer;
  35:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  36:Generated_Source\PSoC4/I2C_I2C_INT.c **** #ifdef I2C_I2C_ISR_ENTRY_CALLBACK
  37:Generated_Source\PSoC4/I2C_I2C_INT.c ****     I2C_I2C_ISR_EntryCallback();
  38:Generated_Source\PSoC4/I2C_I2C_INT.c **** #endif /* I2C_I2C_ISR_ENTRY_CALLBACK */
  39:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  40:Generated_Source\PSoC4/I2C_I2C_INT.c **** #if (I2C_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
  41:Generated_Source\PSoC4/I2C_I2C_INT.c ****     uint32 response;
  42:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  43:Generated_Source\PSoC4/I2C_I2C_INT.c ****     response = I2C_I2C_ACK_ADDR;
  44:Generated_Source\PSoC4/I2C_I2C_INT.c **** #endif /* (I2C_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
  45:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  46:Generated_Source\PSoC4/I2C_I2C_INT.c ****     endTransfer = 0u; /* Continue active transfer */
  47:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  48:Generated_Source\PSoC4/I2C_I2C_INT.c ****     /* Calls customer routine if registered */
  49:Generated_Source\PSoC4/I2C_I2C_INT.c ****     if(NULL != I2C_customIntrHandler)
  37              		.loc 1 49 0
  38 0002 CA4B     		ldr	r3, .L37
  39 0004 1B68     		ldr	r3, [r3]
  40 0006 002B     		cmp	r3, #0
  41 0008 00D0     		beq	.L2
  50:Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
  51:Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_customIntrHandler();
  42              		.loc 1 51 0
  43 000a 9847     		blx	r3
  44              	.LVL1:
  45              	.L2:
  52:Generated_Source\PSoC4/I2C_I2C_INT.c ****     }
  53:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  54:Generated_Source\PSoC4/I2C_I2C_INT.c ****     if(I2C_CHECK_INTR_I2C_EC_MASKED(I2C_INTR_I2C_EC_WAKE_UP))
  46              		.loc 1 54 0
  47 000c C84B     		ldr	r3, .L37+4
  48 000e 1B68     		ldr	r3, [r3]
  49 0010 DB07     		lsls	r3, r3, #31
  50 0012 02D5     		bpl	.L3
  55:Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
  56:Generated_Source\PSoC4/I2C_I2C_INT.c ****         /* Mask-off after wakeup */
  57:Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_SetI2CExtClkInterruptMode(I2C_NO_INTR_SOURCES);
  51              		.loc 1 57 0
  52 0014 0022     		movs	r2, #0
  53 0016 C74B     		ldr	r3, .L37+8
  54 0018 1A60     		str	r2, [r3]
  55              	.L3:
  58:Generated_Source\PSoC4/I2C_I2C_INT.c ****     }
  59:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 3


  60:Generated_Source\PSoC4/I2C_I2C_INT.c ****     /* Master and Slave error tracking:
  61:Generated_Source\PSoC4/I2C_I2C_INT.c ****     * Add the master state check to track only the master errors when the master is active or
  62:Generated_Source\PSoC4/I2C_I2C_INT.c ****     * track slave errors when the slave is active or idle.
  63:Generated_Source\PSoC4/I2C_I2C_INT.c ****     * A special MMS case: in the address phase with misplaced Start: the master sets the LOST_ARB a
  64:Generated_Source\PSoC4/I2C_I2C_INT.c ****     * slave BUS_ERR. The valid event is LOST_ARB comes from the master.
  65:Generated_Source\PSoC4/I2C_I2C_INT.c ****     */
  66:Generated_Source\PSoC4/I2C_I2C_INT.c ****     if(I2C_CHECK_I2C_FSM_MASTER)
  56              		.loc 1 66 0
  57 001a C74B     		ldr	r3, .L37+12
  58 001c 1B78     		ldrb	r3, [r3]
  59 001e 9B06     		lsls	r3, r3, #26
  60 0020 22D4     		bmi	.L4
  67:Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
  68:Generated_Source\PSoC4/I2C_I2C_INT.c ****         #if(I2C_I2C_MASTER)
  69:Generated_Source\PSoC4/I2C_I2C_INT.c ****         {
  70:Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_MASTER_I2C_BUS_ERROR:
  71:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * A misplaced Start or Stop condition occurred on the bus: complete the transaction.
  72:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The interrupt is cleared in I2C_FSM_EXIT_IDLE.
  73:Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
  74:Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_MASTER_MASKED(I2C_INTR_MASTER_I2C_BUS_ERROR))
  75:Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
  76:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_mstrStatus |= (uint16) (I2C_I2C_MSTAT_ERR_XFER |
  77:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                          I2C_I2C_MSTAT_ERR_BUS_ERROR);
  78:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  79:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
  80:Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
  81:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  82:Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_MASTER_I2C_ARB_LOST:
  83:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The MultiMaster lost arbitrage during transaction.
  84:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * A Misplaced Start or Stop condition is treated as lost arbitration when the master dr
  85:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The interrupt source is cleared in I2C_FSM_EXIT_IDLE.
  86:Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
  87:Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_MASTER_MASKED(I2C_INTR_MASTER_I2C_ARB_LOST))
  88:Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
  89:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_mstrStatus |= (uint16) (I2C_I2C_MSTAT_ERR_XFER |
  90:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                          I2C_I2C_MSTAT_ERR_ARB_LOST);
  91:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  92:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
  93:Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
  94:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
  95:Generated_Source\PSoC4/I2C_I2C_INT.c ****             #if(I2C_I2C_MULTI_MASTER_SLAVE)
  96:Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
  97:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* I2C_MASTER_CMD_M_START_ON_IDLE:
  98:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 * MultiMaster-Slave does not generate start, because Slave was addressed.
  99:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 * Pass control to slave.
 100:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 */
 101:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_CHECK_I2C_MASTER_CMD(I2C_I2C_MASTER_CMD_M_START_ON_IDLE))
 102:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 103:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_mstrStatus |= (uint16) (I2C_I2C_MSTAT_ERR_XFER |
 104:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                              I2C_I2C_MSTAT_ERR_ABORT_XFER);
 105:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 106:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 107:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 108:Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 109:Generated_Source\PSoC4/I2C_I2C_INT.c ****             #endif
 110:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 111:Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* The error handling common part:
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 4


 112:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * Sets a completion flag of the master transaction and passes control to:
 113:Generated_Source\PSoC4/I2C_I2C_INT.c ****             *  - I2C_FSM_EXIT_IDLE - to complete transaction in case of: ARB_LOST or BUS_ERR.
 114:Generated_Source\PSoC4/I2C_I2C_INT.c ****             *  - I2C_FSM_IDLE      - to take chance for the slave to process incoming transaction.
 115:Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 116:Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(0u != endTransfer)
 117:Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 118:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Set completion flags for master */
 119:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_mstrStatus |= (uint16) I2C_GET_I2C_MSTAT_CMPLT;
 120:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 121:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #if(I2C_I2C_MULTI_MASTER_SLAVE)
 122:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 123:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if(I2C_CHECK_I2C_FSM_ADDR)
 124:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 125:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Start generation is set after another master starts accessing Slave.
 126:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * Clean-up master and turn to slave. Set state to IDLE.
 127:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 128:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(I2C_CHECK_I2C_MASTER_CMD(I2C_I2C_MASTER_CMD_M_START_ON_IDLE))
 129:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 130:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_I2C_MASTER_CLEAR_START;
 131:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 132:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER; /* Pass control to Slave */
 133:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 134:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Valid arbitration lost on the address phase happens only when: master LO
 135:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * slave BUS_ERR is cleared. Only in that case set the state to IDLE without
 136:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 137:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else if((!I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_BUS_ERROR))
 138:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                && I2C_CHECK_INTR_MASTER_MASKED(I2C_INTR_MASTER_I2C_ARB_LOST))
 139:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 140:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER; /* Pass control to Slave */
 141:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 142:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else
 143:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 144:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             endTransfer = 0u; /* Causes I2C_FSM_EXIT_IDLE to be set below */
 145:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 146:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 147:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(0u != endTransfer) /* Clean-up master to proceed with slave */
 148:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 149:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_CLEAR_TX_FIFO; /* Shifter keeps address, clear it */
 150:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 151:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_DISABLE_MASTER_AUTO_DATA_ACK; /* In case of reading disable autoACK
 152:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 153:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Clean-up master interrupt sources */
 154:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_ClearMasterInterruptSource(I2C_INTR_MASTER_ALL);
 155:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 156:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Disable data processing interrupts: they have to be cleared before *
 157:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_SetRxInterruptMode(I2C_NO_INTR_SOURCES);
 158:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_SetTxInterruptMode(I2C_NO_INTR_SOURCES);
 159:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 160:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_state = I2C_I2C_FSM_IDLE;
 161:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 162:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else
 163:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 164:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Set I2C_FSM_EXIT_IDLE for BUS_ERR and ARB_LOST (that is really bus e
 165:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_state = I2C_I2C_FSM_EXIT_IDLE;
 166:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 167:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 168:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 5


 169:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 170:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Set I2C_FSM_EXIT_IDLE if any other state than address */
 171:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_state = I2C_I2C_FSM_EXIT_IDLE;
 172:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 173:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 174:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #else
 175:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 176:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* In case of LOST*/
 177:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_state = I2C_I2C_FSM_EXIT_IDLE;
 178:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 179:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #endif
 180:Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 181:Generated_Source\PSoC4/I2C_I2C_INT.c ****         }
 182:Generated_Source\PSoC4/I2C_I2C_INT.c ****         #endif
 183:Generated_Source\PSoC4/I2C_I2C_INT.c ****     }
 184:Generated_Source\PSoC4/I2C_I2C_INT.c ****     else /* (I2C_CHECK_I2C_FSM_SLAVE) */
 185:Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
 186:Generated_Source\PSoC4/I2C_I2C_INT.c ****         #if(I2C_I2C_SLAVE)
 187:Generated_Source\PSoC4/I2C_I2C_INT.c ****         {
 188:Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_SLAVE_I2C_BUS_ERROR or I2C_INTR_SLAVE_I2C_ARB_LOST:
 189:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * A Misplaced Start or Stop condition occurred on the bus: set a flag
 190:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * to notify an error condition.
 191:Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 192:Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_BUS_ERROR |
  61              		.loc 1 192 0
  62 0022 C64B     		ldr	r3, .L37+16
  63 0024 1A68     		ldr	r2, [r3]
  64 0026 0223     		movs	r3, #2
  65 0028 FF33     		adds	r3, r3, #255
  66 002a 1A42     		tst	r2, r3
  67 002c 1CD0     		beq	.L4
 193:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                         I2C_INTR_SLAVE_I2C_ARB_LOST))
 194:Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 195:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_CHECK_I2C_FSM_RD)
  68              		.loc 1 195 0
  69 002e C24B     		ldr	r3, .L37+12
  70 0030 1B78     		ldrb	r3, [r3]
  71 0032 DB07     		lsls	r3, r3, #31
  72 0034 0AD5     		bpl	.L5
 196:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 197:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* TX direction: master reads from slave */
 198:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus &= (uint8) ~I2C_I2C_SSTAT_RD_BUSY;
  73              		.loc 1 198 0
  74 0036 C24A     		ldr	r2, .L37+20
  75 0038 1378     		ldrb	r3, [r2]
  76 003a 0221     		movs	r1, #2
  77 003c 8B43     		bics	r3, r1
  78 003e 1370     		strb	r3, [r2]
 199:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus |= (uint8) (I2C_I2C_SSTAT_RD_ERR |
  79              		.loc 1 199 0
  80 0040 1178     		ldrb	r1, [r2]
  81 0042 0923     		movs	r3, #9
  82 0044 0B43     		orrs	r3, r1
  83 0046 DBB2     		uxtb	r3, r3
  84 0048 1370     		strb	r3, [r2]
  85 004a 0AE0     		b	.L6
  86              	.L5:
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 6


 200:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                           I2C_I2C_SSTAT_RD_CMPLT);
 201:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 202:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 else
 203:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 204:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* RX direction: master writes into slave */
 205:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus &= (uint8) ~I2C_I2C_SSTAT_WR_BUSY;
  87              		.loc 1 205 0
  88 004c BC4A     		ldr	r2, .L37+20
  89 004e 1378     		ldrb	r3, [r2]
  90 0050 2021     		movs	r1, #32
  91 0052 8B43     		bics	r3, r1
  92 0054 1370     		strb	r3, [r2]
 206:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus |= (uint8) (I2C_I2C_SSTAT_WR_ERR |
  93              		.loc 1 206 0
  94 0056 1178     		ldrb	r1, [r2]
  95 0058 7023     		movs	r3, #112
  96 005a 5B42     		rsbs	r3, r3, #0
  97 005c 0B43     		orrs	r3, r1
  98 005e DBB2     		uxtb	r3, r3
  99 0060 1370     		strb	r3, [r2]
 100              	.L6:
 207:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                           I2C_I2C_SSTAT_WR_CMPLT);
 208:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 209:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 210:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_state = I2C_I2C_FSM_EXIT_IDLE;
 101              		.loc 1 210 0
 102 0062 0022     		movs	r2, #0
 103 0064 B44B     		ldr	r3, .L37+12
 104 0066 1A70     		strb	r2, [r3]
 105              	.L4:
 211:Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 212:Generated_Source\PSoC4/I2C_I2C_INT.c ****         }
 213:Generated_Source\PSoC4/I2C_I2C_INT.c ****         #endif
 214:Generated_Source\PSoC4/I2C_I2C_INT.c ****     }
 215:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 216:Generated_Source\PSoC4/I2C_I2C_INT.c ****     /* States description:
 217:Generated_Source\PSoC4/I2C_I2C_INT.c ****     * Any Master operation starts from: the ADDR_RD/WR state as the master generates traffic on the
 218:Generated_Source\PSoC4/I2C_I2C_INT.c ****     * Any Slave operation starts from: the IDLE state as the slave always waits for actions from th
 219:Generated_Source\PSoC4/I2C_I2C_INT.c ****     */
 220:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 221:Generated_Source\PSoC4/I2C_I2C_INT.c ****     /* FSM Master */
 222:Generated_Source\PSoC4/I2C_I2C_INT.c ****     if(I2C_CHECK_I2C_FSM_MASTER)
 106              		.loc 1 222 0
 107 0068 B34B     		ldr	r3, .L37+12
 108 006a 1B78     		ldrb	r3, [r3]
 109 006c 9B06     		lsls	r3, r3, #26
 110 006e 00D5     		bpl	.LCB96
 111 0070 5AE1     		b	.L1	@long jump
 112              	.LCB96:
 223:Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
 224:Generated_Source\PSoC4/I2C_I2C_INT.c ****         #if(I2C_I2C_MASTER)
 225:Generated_Source\PSoC4/I2C_I2C_INT.c ****         {
 226:Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_MASTER_I2C_STOP:
 227:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * A Stop condition was generated by the master: the end of the transaction.
 228:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * Set completion flags to notify the API.
 229:Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 230:Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_MASTER_MASKED(I2C_INTR_MASTER_I2C_STOP))
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 7


 231:Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 232:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearMasterInterruptSource(I2C_INTR_MASTER_I2C_STOP);
 233:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 234:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_mstrStatus |= (uint16) I2C_GET_I2C_MSTAT_CMPLT;
 235:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_state       = I2C_I2C_FSM_IDLE;
 236:Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 237:Generated_Source\PSoC4/I2C_I2C_INT.c ****             else
 238:Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 239:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_CHECK_I2C_FSM_ADDR) /* Address stage */
 240:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 241:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* INTR_MASTER_I2C_NACK:
 242:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     * The master sent an address but it was NACKed by the slave. Complete transacti
 243:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     */
 244:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if(I2C_CHECK_INTR_MASTER_MASKED(I2C_INTR_MASTER_I2C_NACK))
 245:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 246:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_ClearMasterInterruptSource(I2C_INTR_MASTER_I2C_NACK);
 247:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 248:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_mstrStatus |= (uint16) (I2C_I2C_MSTAT_ERR_XFER |
 249:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                                  I2C_I2C_MSTAT_ERR_ADDR_NAK);
 250:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 251:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 252:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 253:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* INTR_TX_UNDERFLOW. The master sent an address:
 254:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     *  - TX direction: the clock is stretched after the ACK phase, because the TX F
 255:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     *    EMPTY. The TX EMPTY cleans all the TX interrupt sources.
 256:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     *  - RX direction: the 1st byte is received, but there is no ACK permission,
 257:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     *    the clock is stretched after 1 byte is received.
 258:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     */
 259:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else
 260:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 261:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(I2C_CHECK_I2C_FSM_RD) /* Reading */
 262:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 263:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_state = I2C_I2C_FSM_MSTR_RD_DATA;
 264:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 265:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else /* Writing */
 266:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 267:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_state = I2C_I2C_FSM_MSTR_WR_DATA;
 268:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if(0u != I2C_mstrWrBufSize)
 269:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 270:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 /* Enable INTR.TX_EMPTY if there is data to transmit */
 271:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_SetTxInterruptMode(I2C_INTR_TX_EMPTY);
 272:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 273:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 274:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 275:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 276:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 277:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_CHECK_I2C_FSM_DATA) /* Data phase */
 278:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 279:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if(I2C_CHECK_I2C_FSM_RD) /* Reading */
 280:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 281:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* INTR_RX_FULL:
 282:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * RX direction: the master received 8 bytes.
 283:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * Get data from RX FIFO and decide whether to ACK or  NACK the following by
 284:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 285:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(I2C_CHECK_INTR_RX_MASKED(I2C_INTR_RX_FULL))
 286:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 287:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Calculate difference */
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 8


 288:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             diffCount =  I2C_mstrRdBufSize -
 289:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                         (I2C_mstrRdBufIndex + I2C_GET_RX_FIFO_ENTRIES);
 290:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 291:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Proceed transaction or end it when RX FIFO becomes FULL again */
 292:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if(diffCount > I2C_I2C_FIFO_SIZE)
 293:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 294:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 diffCount = I2C_I2C_FIFO_SIZE;
 295:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 296:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             else
 297:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 298:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 if(0u == diffCount)
 299:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 {
 300:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     I2C_DISABLE_MASTER_AUTO_DATA_ACK;
 301:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 302:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     diffCount   = I2C_I2C_FIFO_SIZE;
 303:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 304:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 }
 305:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 306:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 307:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             for(; (0u != diffCount); diffCount--)
 308:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 309:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_mstrRdBufPtr[I2C_mstrRdBufIndex] = (uint8)
 310:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                                                         I2C_RX_FIFO
 311:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_mstrRdBufIndex++;
 312:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 313:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 314:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* INTR_RX_NOT_EMPTY:
 315:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * RX direction: the master received one data byte, ACK or NACK it.
 316:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * The last byte is stored and NACKed by the master. The NACK and Stop is
 317:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * generated by one command generate Stop.
 318:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 319:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else if(I2C_CHECK_INTR_RX_MASKED(I2C_INTR_RX_NOT_EMPTY))
 320:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 321:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Put data in component buffer */
 322:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_mstrRdBufPtr[I2C_mstrRdBufIndex] = (uint8) I2C_RX_FIFO_RD_REG;
 323:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_mstrRdBufIndex++;
 324:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 325:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if(I2C_mstrRdBufIndex < I2C_mstrRdBufSize)
 326:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 327:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_I2C_MASTER_GENERATE_ACK;
 328:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 329:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             else
 330:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 331:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 332:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 333:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 334:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else
 335:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 336:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Do nothing */
 337:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 338:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 339:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_ClearRxInterruptSource(I2C_INTR_RX_ALL);
 340:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 341:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else /* Writing */
 342:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 343:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* INTR_MASTER_I2C_NACK :
 344:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * The master writes data to the slave and NACK was received: not all the by
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 9


 345:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * written to the slave from the TX FIFO. Revert the index if there is data 
 346:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * the TX FIFO and pass control to a complete transfer.
 347:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 348:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(I2C_CHECK_INTR_MASTER_MASKED(I2C_INTR_MASTER_I2C_NACK))
 349:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 350:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_ClearMasterInterruptSource(I2C_INTR_MASTER_I2C_NACK);
 351:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 352:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Rollback write buffer index: NACKed byte remains in shifter */
 353:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_mstrWrBufIndexTmp -= (I2C_GET_TX_FIFO_ENTRIES +
 354:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                                    I2C_GET_TX_FIFO_SR_VALID);
 355:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 356:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Update number of transferred bytes */
 357:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_mstrWrBufIndex = I2C_mstrWrBufIndexTmp;
 358:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 359:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_mstrStatus |= (uint16) (I2C_I2C_MSTAT_ERR_XFER |
 360:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                                      I2C_I2C_MSTAT_ERR_SHORT_XFER);
 361:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 362:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_CLEAR_TX_FIFO;
 363:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 364:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 365:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 366:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* INTR_TX_EMPTY :
 367:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * TX direction: the TX FIFO is EMPTY, the data from the buffer needs to be 
 368:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * When there is no data in the component buffer, the underflow interrupt is
 369:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * enabled to catch when all the data has been transferred.
 370:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 371:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else if(I2C_CHECK_INTR_TX_MASKED(I2C_INTR_TX_EMPTY))
 372:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 373:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             while(I2C_I2C_FIFO_SIZE != I2C_GET_TX_FIFO_ENTRIES)
 374:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 375:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 /* The temporary mstrWrBufIndexTmp is used because slave could NACK
 376:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 * roll-back required in this case. The mstrWrBufIndex is updated at
 377:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 */
 378:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 if(I2C_mstrWrBufIndexTmp < I2C_mstrWrBufSize)
 379:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 {
 380:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 #if(!I2C_CY_SCBIP_V0)
 381:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                    /* Clear INTR_TX.UNDERFLOW before putting the last byte into TX 
 382:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     * a proper trigger at the end of transaction when INTR_TX.UNDER
 383:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     * event. Ticket ID# 156735.
 384:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     */
 385:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     if(I2C_mstrWrBufIndexTmp == (I2C_mstrWrBufSize - 1u))
 386:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     {
 387:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                         I2C_ClearTxInterruptSource(I2C_INTR_TX_UNDERFLOW);
 388:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                         I2C_SetTxInterruptMode(I2C_INTR_TX_UNDERFLOW);
 389:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     }
 390:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                  #endif /* (!I2C_CY_SCBIP_V0) */
 391:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 392:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     /* Put data into TX FIFO */
 393:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     I2C_TX_FIFO_WR_REG = (uint32) I2C_mstrWrBufPtr[I2C_mstrWrBufInd
 394:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     I2C_mstrWrBufIndexTmp++;
 395:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 }
 396:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 else
 397:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 {
 398:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     break; /* No more data to put */
 399:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 }
 400:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 401:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 10


 402:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #if(I2C_CY_SCBIP_V0)
 403:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if(I2C_mstrWrBufIndexTmp == I2C_mstrWrBufSize)
 404:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 405:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_SetTxInterruptMode(I2C_INTR_TX_UNDERFLOW);
 406:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 407:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 408:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_ClearTxInterruptSource(I2C_INTR_TX_ALL);
 409:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #else
 410:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_ClearTxInterruptSource(I2C_INTR_TX_EMPTY);
 411:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #endif /* (I2C_CY_SCBIP_V0) */
 412:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 413:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* INTR_TX_UNDERFLOW:
 414:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * TX direction: all data from the TX FIFO was transferred to the slave.
 415:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * The transaction needs to be completed.
 416:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 417:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else if(I2C_CHECK_INTR_TX_MASKED(I2C_INTR_TX_UNDERFLOW))
 418:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 419:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Update number of transferred bytes */
 420:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_mstrWrBufIndex = I2C_mstrWrBufIndexTmp;
 421:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 422:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 423:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 424:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else
 425:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 426:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Do nothing */
 427:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 428:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 429:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 430:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 431:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(0u != endTransfer) /* Complete transfer */
 432:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 433:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Clean-up master after reading: only in case of NACK */
 434:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_DISABLE_MASTER_AUTO_DATA_ACK;
 435:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 436:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Disable data processing interrupts: they have to be cleared before */
 437:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_SetRxInterruptMode(I2C_NO_INTR_SOURCES);
 438:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_SetTxInterruptMode(I2C_NO_INTR_SOURCES);
 439:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 440:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if(I2C_CHECK_I2C_MODE_NO_STOP(I2C_mstrControl))
 441:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 442:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* On-going transaction is suspended: the ReStart is generated by the API r
 443:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_mstrStatus |= (uint16) (I2C_I2C_MSTAT_XFER_HALT |
 444:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                                  I2C_GET_I2C_MSTAT_CMPLT);
 445:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 446:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_state = I2C_I2C_FSM_MSTR_HALT;
 447:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 448:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else
 449:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 450:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Complete transaction: exclude the data processing state and generate Sto
 451:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * The completion status will be set after Stop generation.
 452:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * A special case is read: because NACK and Stop are generated by the comman
 453:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * Lost arbitration can occur during NACK generation when
 454:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * the other master is still reading from the slave.
 455:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         */
 456:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_I2C_MASTER_GENERATE_STOP;
 457:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 458:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 11


 459:Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 460:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 461:Generated_Source\PSoC4/I2C_I2C_INT.c ****         } /* (I2C_I2C_MASTER) */
 462:Generated_Source\PSoC4/I2C_I2C_INT.c ****         #endif
 463:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 464:Generated_Source\PSoC4/I2C_I2C_INT.c ****     } /* (I2C_CHECK_I2C_FSM_MASTER) */
 465:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 466:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 467:Generated_Source\PSoC4/I2C_I2C_INT.c ****     /* FSM Slave */
 468:Generated_Source\PSoC4/I2C_I2C_INT.c ****     else if(I2C_CHECK_I2C_FSM_SLAVE)
 113              		.loc 1 468 0
 114 0072 B14B     		ldr	r3, .L37+12
 115 0074 1B78     		ldrb	r3, [r3]
 116 0076 DB06     		lsls	r3, r3, #27
 117 0078 00D4     		bmi	.LCB104
 118 007a 53E1     		b	.L8	@long jump
 119              	.LCB104:
 469:Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
 470:Generated_Source\PSoC4/I2C_I2C_INT.c ****         #if(I2C_I2C_SLAVE)
 471:Generated_Source\PSoC4/I2C_I2C_INT.c ****         {
 472:Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_SLAVE_NACK:
 473:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The master completes reading the slave: the appropriate flags have to be set.
 474:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The TX FIFO is cleared after an overflow condition is set.
 475:Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 476:Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_NACK))
 120              		.loc 1 476 0
 121 007c AF4B     		ldr	r3, .L37+16
 122 007e 1B68     		ldr	r3, [r3]
 123 0080 9B07     		lsls	r3, r3, #30
 124 0082 40D5     		bpl	.L9
 477:Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 478:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearSlaveInterruptSource(I2C_INTR_SLAVE_I2C_NACK);
 125              		.loc 1 478 0
 126 0084 0222     		movs	r2, #2
 127 0086 AF4B     		ldr	r3, .L37+24
 128 0088 1A60     		str	r2, [r3]
 479:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 480:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* All entries that remain in TX FIFO are: FIFO Size + 1 (SHIFTER) */
 481:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 diffCount = (I2C_GET_TX_FIFO_ENTRIES + I2C_GET_TX_FIFO_SR_VALID);
 129              		.loc 1 481 0
 130 008a AF49     		ldr	r1, .L37+28
 131 008c 0B68     		ldr	r3, [r1]
 132 008e 1D32     		adds	r2, r2, #29
 133 0090 1A40     		ands	r2, r3
 134 0092 0968     		ldr	r1, [r1]
 135 0094 8023     		movs	r3, #128
 136 0096 1B02     		lsls	r3, r3, #8
 137 0098 0B40     		ands	r3, r1
 138 009a 00D0     		beq	.L10
 139 009c 0123     		movs	r3, #1
 140              	.L10:
 141              		.loc 1 481 0 is_stmt 0 discriminator 4
 142 009e 9B18     		adds	r3, r3, r2
 143              	.LVL2:
 482:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 483:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_slOverFlowCount > diffCount) /* Overflow */
 144              		.loc 1 483 0 is_stmt 1 discriminator 4
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 12


 145 00a0 AA4A     		ldr	r2, .L37+32
 146 00a2 1278     		ldrb	r2, [r2]
 147 00a4 D2B2     		uxtb	r2, r2
 148 00a6 9342     		cmp	r3, r2
 149 00a8 06D2     		bcs	.L11
 484:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 485:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus |= (uint8) I2C_I2C_SSTAT_RD_OVFL;
 150              		.loc 1 485 0
 151 00aa A54A     		ldr	r2, .L37+20
 152 00ac 1178     		ldrb	r1, [r2]
 153 00ae 0423     		movs	r3, #4
 154              	.LVL3:
 155 00b0 0B43     		orrs	r3, r1
 156 00b2 DBB2     		uxtb	r3, r3
 157 00b4 1370     		strb	r3, [r2]
 158 00b6 06E0     		b	.L12
 159              	.LVL4:
 160              	.L11:
 486:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 487:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 else /* No Overflow */
 488:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 489:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Roll-back temporary index */
 490:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slRdBufIndexTmp -= (diffCount - I2C_slOverFlowCount);
 161              		.loc 1 490 0
 162 00b8 A44A     		ldr	r2, .L37+32
 163 00ba 1278     		ldrb	r2, [r2]
 164 00bc 9B1A     		subs	r3, r3, r2
 165              	.LVL5:
 166 00be A449     		ldr	r1, .L37+36
 167 00c0 0A68     		ldr	r2, [r1]
 168 00c2 D31A     		subs	r3, r2, r3
 169 00c4 0B60     		str	r3, [r1]
 170              	.L12:
 491:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 492:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 493:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Update slave of transferred bytes */
 494:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_slRdBufIndex = I2C_slRdBufIndexTmp;
 171              		.loc 1 494 0
 172 00c6 A24B     		ldr	r3, .L37+36
 173 00c8 1A68     		ldr	r2, [r3]
 174 00ca A24B     		ldr	r3, .L37+40
 175 00cc 1A60     		str	r2, [r3]
 495:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 496:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Clean-up TX FIFO */
 497:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_SetTxInterruptMode(I2C_NO_INTR_SOURCES);
 176              		.loc 1 497 0
 177 00ce 0023     		movs	r3, #0
 178 00d0 A14A     		ldr	r2, .L37+44
 179 00d2 1360     		str	r3, [r2]
 498:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_slOverFlowCount = 0u;
 180              		.loc 1 498 0
 181 00d4 9D4A     		ldr	r2, .L37+32
 182 00d6 1370     		strb	r3, [r2]
 499:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_CLEAR_TX_FIFO;
 183              		.loc 1 499 0
 184 00d8 A04B     		ldr	r3, .L37+48
 185 00da 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 13


 186 00dc 8021     		movs	r1, #128
 187 00de 4902     		lsls	r1, r1, #9
 188 00e0 0A43     		orrs	r2, r1
 189 00e2 1A60     		str	r2, [r3]
 190 00e4 1968     		ldr	r1, [r3]
 191 00e6 9E4A     		ldr	r2, .L37+52
 192 00e8 0A40     		ands	r2, r1
 193 00ea 1A60     		str	r2, [r3]
 500:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 501:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Complete master reading */
 502:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_slStatus &= (uint8) ~I2C_I2C_SSTAT_RD_BUSY;
 194              		.loc 1 502 0
 195 00ec 944A     		ldr	r2, .L37+20
 196 00ee 1378     		ldrb	r3, [r2]
 197 00f0 0221     		movs	r1, #2
 198 00f2 8B43     		bics	r3, r1
 199 00f4 1370     		strb	r3, [r2]
 503:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_slStatus |= (uint8)  I2C_I2C_SSTAT_RD_CMPLT;
 200              		.loc 1 503 0
 201 00f6 1178     		ldrb	r1, [r2]
 202 00f8 0123     		movs	r3, #1
 203 00fa 0B43     		orrs	r3, r1
 204 00fc DBB2     		uxtb	r3, r3
 205 00fe 1370     		strb	r3, [r2]
 504:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_state     =  I2C_I2C_FSM_IDLE;
 206              		.loc 1 504 0
 207 0100 1022     		movs	r2, #16
 208 0102 8D4B     		ldr	r3, .L37+12
 209 0104 1A70     		strb	r2, [r3]
 210              	.L9:
 505:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 
 506:Generated_Source\PSoC4/I2C_I2C_INT.c ****             #ifdef I2C_I2C_SLAVE_CMPLT_CALLBACK
 507:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Read complete */
 508:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_I2C_SlaveCompleteCallback();
 509:Generated_Source\PSoC4/I2C_I2C_INT.c ****             #endif /* I2C_I2C_SLAVE_CMPLT_CALLBACK */
 510:Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 511:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 512:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 513:Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_SLAVE_I2C_WRITE_STOP:
 514:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The master completes writing to the slave: the appropriate flags have to be set.
 515:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The RX FIFO contains 1-8 bytes from the previous transaction which needs to be read.
 516:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * There is a possibility that RX FIFO contains an address, it needs to leave it there.
 517:Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 518:Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_WRITE_STOP))
 211              		.loc 1 518 0
 212 0106 8D4B     		ldr	r3, .L37+16
 213 0108 1B68     		ldr	r3, [r3]
 214 010a 1B07     		lsls	r3, r3, #28
 215 010c 39D5     		bpl	.L13
 519:Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 520:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearSlaveInterruptSource(I2C_INTR_SLAVE_I2C_WRITE_STOP);
 216              		.loc 1 520 0
 217 010e 0822     		movs	r2, #8
 218 0110 8C4B     		ldr	r3, .L37+24
 219 0112 1A60     		str	r2, [r3]
 521:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 522:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Read bytes from RX FIFO when auto data ACK receive logic is enabled. Otherwise a
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 14


 523:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 * were already read from the RX FIFO except for address byte which has to stay here
 524:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 * I2C_ADDR_MATCH.
 525:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 */
 526:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if (0u != (I2C_I2C_CTRL_REG & I2C_I2C_CTRL_S_READY_DATA_ACK))
 220              		.loc 1 526 0
 221 0114 934B     		ldr	r3, .L37+56
 222 0116 1B68     		ldr	r3, [r3]
 223 0118 9B04     		lsls	r3, r3, #18
 224 011a 0CD4     		bmi	.L14
 225 011c 14E0     		b	.L15
 226              	.L16:
 527:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 528:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     while(0u != I2C_GET_RX_FIFO_ENTRIES)
 529:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 530:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #if(I2C_CHECK_I2C_ACCEPT_ADDRESS)
 531:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 532:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if((1u == I2C_GET_RX_FIFO_ENTRIES) &&
 533:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                (I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_ADDR_MATCH)))
 534:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 535:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 break; /* Leave address in RX FIFO */
 536:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 537:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 538:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #endif
 539:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 540:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Put data in component buffer */
 541:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_slWrBufPtr[I2C_slWrBufIndex] = (uint8) I2C_RX_FIFO_RD_REG;
 227              		.loc 1 541 0
 228 011e 924B     		ldr	r3, .L37+60
 229 0120 1A68     		ldr	r2, [r3]
 230 0122 9249     		ldr	r1, .L37+64
 231 0124 0968     		ldr	r1, [r1]
 232 0126 8A18     		adds	r2, r1, r2
 233 0128 9149     		ldr	r1, .L37+68
 234 012a 0968     		ldr	r1, [r1]
 235 012c C9B2     		uxtb	r1, r1
 236 012e 1170     		strb	r1, [r2]
 542:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_slWrBufIndex++;
 237              		.loc 1 542 0
 238 0130 1A68     		ldr	r2, [r3]
 239 0132 0132     		adds	r2, r2, #1
 240 0134 1A60     		str	r2, [r3]
 241              	.L14:
 528:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 242              		.loc 1 528 0
 243 0136 8F4B     		ldr	r3, .L37+72
 244 0138 1B68     		ldr	r3, [r3]
 245 013a DB06     		lsls	r3, r3, #27
 246 013c EFD1     		bne	.L16
 543:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 544:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 545:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_DISABLE_SLAVE_AUTO_DATA;
 247              		.loc 1 545 0
 248 013e 894A     		ldr	r2, .L37+56
 249 0140 1168     		ldr	r1, [r2]
 250 0142 8D4B     		ldr	r3, .L37+76
 251 0144 0B40     		ands	r3, r1
 252 0146 1360     		str	r3, [r2]
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 15


 253              	.L15:
 546:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 547:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 548:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_CHECK_INTR_RX(I2C_INTR_RX_OVERFLOW))
 254              		.loc 1 548 0
 255 0148 8C4B     		ldr	r3, .L37+80
 256 014a 1B68     		ldr	r3, [r3]
 257 014c 9B06     		lsls	r3, r3, #26
 258 014e 05D5     		bpl	.L17
 549:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 550:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus |= (uint8) I2C_I2C_SSTAT_WR_OVFL;
 259              		.loc 1 550 0
 260 0150 7B4A     		ldr	r2, .L37+20
 261 0152 1178     		ldrb	r1, [r2]
 262 0154 4023     		movs	r3, #64
 263 0156 0B43     		orrs	r3, r1
 264 0158 DBB2     		uxtb	r3, r3
 265 015a 1370     		strb	r3, [r2]
 266              	.L17:
 551:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 552:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 553:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Clears RX interrupt sources triggered on data receiving */
 554:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_SetRxInterruptMode(I2C_NO_INTR_SOURCES);
 267              		.loc 1 554 0
 268 015c 0022     		movs	r2, #0
 269 015e 884B     		ldr	r3, .L37+84
 270 0160 1A60     		str	r2, [r3]
 555:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearRxInterruptSource(I2C_INTR_RX_ALL);
 271              		.loc 1 555 0
 272 0162 884A     		ldr	r2, .L37+88
 273 0164 854B     		ldr	r3, .L37+80
 274 0166 1A60     		str	r2, [r3]
 556:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 557:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Complete master writing */
 558:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_slStatus &= (uint8) ~I2C_I2C_SSTAT_WR_BUSY;
 275              		.loc 1 558 0
 276 0168 754A     		ldr	r2, .L37+20
 277 016a 1378     		ldrb	r3, [r2]
 278 016c 2021     		movs	r1, #32
 279 016e 8B43     		bics	r3, r1
 280 0170 1370     		strb	r3, [r2]
 559:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_slStatus |= (uint8)  I2C_I2C_SSTAT_WR_CMPLT;
 281              		.loc 1 559 0
 282 0172 1178     		ldrb	r1, [r2]
 283 0174 1023     		movs	r3, #16
 284 0176 0B43     		orrs	r3, r1
 285 0178 DBB2     		uxtb	r3, r3
 286 017a 1370     		strb	r3, [r2]
 560:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_state     =  I2C_I2C_FSM_IDLE;
 287              		.loc 1 560 0
 288 017c 6E4B     		ldr	r3, .L37+12
 289 017e 1022     		movs	r2, #16
 290 0180 1A70     		strb	r2, [r3]
 291              	.L13:
 561:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 562:Generated_Source\PSoC4/I2C_I2C_INT.c ****             #ifdef I2C_I2C_SLAVE_CMPLT_CALLBACK
 563:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Write complete */
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 16


 564:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_I2C_SlaveCompleteCallback();
 565:Generated_Source\PSoC4/I2C_I2C_INT.c ****             #endif /* I2C_I2C_SLAVE_CMPLT_CALLBACK */
 566:Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 567:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 568:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 569:Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* INTR_SLAVE_I2C_ADDR_MATCH or INTR_SLAVE_I2C_GENERAL:
 570:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The address match or general call address event starts the slave operation:
 571:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * after leaving the TX or RX direction has to be chosen.
 572:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The wakeup interrupt must be cleared only after an address match is set.
 573:Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 574:Generated_Source\PSoC4/I2C_I2C_INT.c ****         #if (I2C_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
 575:Generated_Source\PSoC4/I2C_I2C_INT.c ****             if (I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_ADDR_MATCH |
 576:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                                          I2C_INTR_SLAVE_I2C_GENERAL))
 577:Generated_Source\PSoC4/I2C_I2C_INT.c ****         #else
 578:Generated_Source\PSoC4/I2C_I2C_INT.c ****             if (I2C_CHECK_INTR_SLAVE_MASKED(I2C_INTR_SLAVE_I2C_ADDR_MATCH))
 292              		.loc 1 578 0
 293 0182 6E4B     		ldr	r3, .L37+16
 294 0184 1B68     		ldr	r3, [r3]
 295 0186 5B06     		lsls	r3, r3, #25
 296 0188 48D5     		bpl	.L18
 579:Generated_Source\PSoC4/I2C_I2C_INT.c ****         #endif /* (I2C_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 580:Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 581:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Clear externally clocked address match interrupt source when internally clocked 
 582:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearI2CExtClkInterruptSource(I2C_INTR_I2C_EC_WAKE_UP);
 297              		.loc 1 582 0
 298 018a 0122     		movs	r2, #1
 299 018c 7E4B     		ldr	r3, .L37+92
 300 018e 1A60     		str	r2, [r3]
 583:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 584:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #if (I2C_I2C_CUSTOM_ADDRESS_HANDLER)
 585:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 586:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if (NULL != I2C_customAddressHandler)
 587:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 588:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Call custom address handler */
 589:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         response = I2C_customAddressHandler();
 590:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 591:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else
 592:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 593:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Read address from the RX FIFO. If there is no address underflow triggers
 594:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         * component does not use that source. */
 595:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         (void) I2C_RX_FIFO_RD_REG;
 596:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         response = I2C_I2C_ACK_ADDR;
 597:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 598:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 599:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Clears RX sources after address was received in the RX FIFO */
 600:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_ClearRxInterruptSource(I2C_INTR_RX_ALL);
 601:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 602:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #endif
 603:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 604:Generated_Source\PSoC4/I2C_I2C_INT.c ****             #if (I2C_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
 605:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if (response == I2C_I2C_NAK_ADDR)
 606:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 607:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #if (!I2C_CY_SCBIP_V0)
 608:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Disable write stop interrupt source as it triggers after address was NACKed.
 609:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_DISABLE_INTR_SLAVE(I2C_INTR_SLAVE_I2C_WRITE_STOP);
 610:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #endif /* (!I2C_CY_SCBIP_V0) */
 611:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 17


 612:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Clear address match and stop history */
 613:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_ClearSlaveInterruptSource(I2C_INTR_SLAVE_ALL);
 614:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 615:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* ACK the address byte */
 616:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_I2C_SLAVE_GENERATE_NACK;
 617:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 618:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 else
 619:Generated_Source\PSoC4/I2C_I2C_INT.c ****             #endif /* (I2C_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 620:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 621:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if(I2C_CHECK_I2C_STATUS(I2C_I2C_STATUS_S_READ))
 301              		.loc 1 621 0
 302 0190 7E4B     		ldr	r3, .L37+96
 303 0192 1B68     		ldr	r3, [r3]
 304 0194 DB06     		lsls	r3, r3, #27
 305 0196 10D5     		bpl	.L19
 622:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* TX direction: master reads from slave */
 623:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 624:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_SetTxInterruptMode(I2C_INTR_TX_EMPTY);
 306              		.loc 1 624 0
 307 0198 0F32     		adds	r2, r2, #15
 308 019a 6F4B     		ldr	r3, .L37+44
 309 019c 1A60     		str	r2, [r3]
 625:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 626:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Set temporary index to address buffer clear from API */
 627:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_slRdBufIndexTmp = I2C_slRdBufIndex;
 310              		.loc 1 627 0
 311 019e 6D4B     		ldr	r3, .L37+40
 312 01a0 1A68     		ldr	r2, [r3]
 313 01a2 6B4B     		ldr	r3, .L37+36
 314 01a4 1A60     		str	r2, [r3]
 628:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 629:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Start master reading */
 630:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_slStatus |= (uint8) I2C_I2C_SSTAT_RD_BUSY;
 315              		.loc 1 630 0
 316 01a6 664A     		ldr	r2, .L37+20
 317 01a8 1178     		ldrb	r1, [r2]
 318 01aa 0223     		movs	r3, #2
 319 01ac 0B43     		orrs	r3, r1
 320 01ae DBB2     		uxtb	r3, r3
 321 01b0 1370     		strb	r3, [r2]
 631:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_state     = I2C_I2C_FSM_SL_RD;
 322              		.loc 1 631 0
 323 01b2 1222     		movs	r2, #18
 324 01b4 604B     		ldr	r3, .L37+12
 325 01b6 1A70     		strb	r2, [r3]
 326 01b8 25E0     		b	.L20
 327              	.L19:
 632:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 633:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else
 634:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* RX direction: master writes into slave */
 635:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 636:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Calculate available buffer size */
 637:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         diffCount = (I2C_slWrBufSize - I2C_slWrBufIndex);
 328              		.loc 1 637 0
 329 01ba 754B     		ldr	r3, .L37+100
 330 01bc 1B68     		ldr	r3, [r3]
 331 01be 6A4A     		ldr	r2, .L37+60
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 18


 332 01c0 1268     		ldr	r2, [r2]
 333 01c2 9B1A     		subs	r3, r3, r2
 334              	.LVL6:
 638:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 639:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     #if (I2C_CY_SCBIP_V0)
 640:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(diffCount < I2C_I2C_FIFO_SIZE)
 641:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Receive data: byte-by-byte */
 642:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 643:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_SetRxInterruptMode(I2C_INTR_RX_NOT_EMPTY);
 644:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 645:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         else
 646:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Receive data: into RX FIFO */
 647:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 648:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if(diffCount == I2C_I2C_FIFO_SIZE)
 649:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 650:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 /* NACK when RX FIFO become FULL */
 651:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_ENABLE_SLAVE_AUTO_DATA;
 652:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 653:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             else
 654:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 655:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 /* Stretch clock when RX FIFO becomes FULL */
 656:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_ENABLE_SLAVE_AUTO_DATA_ACK;
 657:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_SetRxInterruptMode(I2C_INTR_RX_FULL);
 658:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 659:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 660:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 661:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     #else
 662:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #if(I2C_CHECK_I2C_ACCEPT_ADDRESS)
 663:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 664:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Enable RX.NOT_EMPTY interrupt source to receive byte by byte.
 665:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             * The byte by byte receive is always chosen for the case when an addres
 666:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             * in RX FIFO. Ticket ID#175559.
 667:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             */
 668:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_SetRxInterruptMode(I2C_INTR_RX_NOT_EMPTY);
 669:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 670:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #else
 671:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 672:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             if(diffCount < I2C_I2C_FIFO_SIZE)
 335              		.loc 1 672 0
 336 01c4 072B     		cmp	r3, #7
 337 01c6 03D8     		bhi	.L21
 673:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Receive data: byte-by-byte */
 674:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 675:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 I2C_SetRxInterruptMode(I2C_INTR_RX_NOT_EMPTY);
 338              		.loc 1 675 0
 339 01c8 0422     		movs	r2, #4
 340 01ca 6D4B     		ldr	r3, .L37+84
 341              	.LVL7:
 342 01cc 1A60     		str	r2, [r3]
 343 01ce 11E0     		b	.L22
 344              	.LVL8:
 345              	.L21:
 676:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 677:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             else
 678:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Receive data: into RX FIFO */
 679:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             {
 680:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 if(diffCount == I2C_I2C_FIFO_SIZE)
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 19


 346              		.loc 1 680 0
 347 01d0 082B     		cmp	r3, #8
 348 01d2 06D1     		bne	.L23
 681:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 {
 682:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     /* NACK when RX FIFO become FULL */
 683:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     I2C_ENABLE_SLAVE_AUTO_DATA;
 349              		.loc 1 683 0
 350 01d4 634A     		ldr	r2, .L37+56
 351 01d6 1368     		ldr	r3, [r2]
 352              	.LVL9:
 353 01d8 A021     		movs	r1, #160
 354 01da 0902     		lsls	r1, r1, #8
 355 01dc 0B43     		orrs	r3, r1
 356 01de 1360     		str	r3, [r2]
 357 01e0 08E0     		b	.L22
 358              	.LVL10:
 359              	.L23:
 684:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 }
 685:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 else
 686:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 {
 687:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     /* Stretch clock when RX FIFO becomes FULL */
 688:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     I2C_ENABLE_SLAVE_AUTO_DATA_ACK;
 360              		.loc 1 688 0
 361 01e2 604A     		ldr	r2, .L37+56
 362 01e4 1368     		ldr	r3, [r2]
 363              	.LVL11:
 364 01e6 8021     		movs	r1, #128
 365 01e8 8901     		lsls	r1, r1, #6
 366 01ea 0B43     		orrs	r3, r1
 367 01ec 1360     		str	r3, [r2]
 689:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                     I2C_SetRxInterruptMode(I2C_INTR_RX_FULL);
 368              		.loc 1 689 0
 369 01ee 0822     		movs	r2, #8
 370 01f0 634B     		ldr	r3, .L37+84
 371 01f2 1A60     		str	r2, [r3]
 372              	.L22:
 690:Generated_Source\PSoC4/I2C_I2C_INT.c ****                                 }
 691:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             }
 692:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 693:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         #endif
 694:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     #endif /* (I2C_CY_SCBIP_V0) */
 695:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 696:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         /* Start master reading */
 697:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_slStatus |= (uint8) I2C_I2C_SSTAT_WR_BUSY;
 373              		.loc 1 697 0
 374 01f4 524A     		ldr	r2, .L37+20
 375 01f6 1178     		ldrb	r1, [r2]
 376 01f8 2023     		movs	r3, #32
 377 01fa 0B43     		orrs	r3, r1
 378 01fc DBB2     		uxtb	r3, r3
 379 01fe 1370     		strb	r3, [r2]
 698:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_state     = I2C_I2C_FSM_SL_WR;
 380              		.loc 1 698 0
 381 0200 1122     		movs	r2, #17
 382 0202 4D4B     		ldr	r3, .L37+12
 383 0204 1A70     		strb	r2, [r3]
 384              	.L20:
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 20


 699:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 700:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 701:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Clear address match and stop history */
 702:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_ClearSlaveInterruptSource(I2C_INTR_SLAVE_ALL);
 385              		.loc 1 702 0
 386 0206 634A     		ldr	r2, .L37+104
 387 0208 4E4B     		ldr	r3, .L37+24
 388 020a 1A60     		str	r2, [r3]
 703:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 704:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #if (!I2C_CY_SCBIP_V0)
 705:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Enable write stop interrupt source as it triggers after address was NACKed. 
 706:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_ENABLE_INTR_SLAVE(I2C_INTR_SLAVE_I2C_WRITE_STOP);
 389              		.loc 1 706 0
 390 020c 624A     		ldr	r2, .L37+108
 391 020e 1168     		ldr	r1, [r2]
 392 0210 0823     		movs	r3, #8
 393 0212 0B43     		orrs	r3, r1
 394 0214 1360     		str	r3, [r2]
 707:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 #endif /* (!I2C_CY_SCBIP_V0) */
 708:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 709:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* ACK the address byte */
 710:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_I2C_SLAVE_GENERATE_ACK;
 395              		.loc 1 710 0
 396 0216 0122     		movs	r2, #1
 397 0218 604B     		ldr	r3, .L37+112
 398 021a 1A60     		str	r2, [r3]
 399              	.L18:
 711:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 712:Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 713:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 714:Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* I2C_INTR_RX_FULL:
 715:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * Get data from the RX FIFO and decide whether to ACK or NACK the following bytes
 716:Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 717:Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_RX_MASKED(I2C_INTR_RX_FULL))
 400              		.loc 1 717 0
 401 021c 604B     		ldr	r3, .L37+116
 402 021e 1B68     		ldr	r3, [r3]
 403 0220 1B07     		lsls	r3, r3, #28
 404 0222 2AD5     		bpl	.L24
 718:Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 719:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Calculate available buffer size to take into account that RX FIFO is FULL */
 720:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 diffCount =  I2C_slWrBufSize -
 405              		.loc 1 720 0
 406 0224 5A4B     		ldr	r3, .L37+100
 407 0226 1B68     		ldr	r3, [r3]
 408 0228 4F4A     		ldr	r2, .L37+60
 409 022a 1068     		ldr	r0, [r2]
 410 022c 181A     		subs	r0, r3, r0
 411 022e 0838     		subs	r0, r0, #8
 412              	.LVL12:
 721:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             (I2C_slWrBufIndex + I2C_I2C_FIFO_SIZE);
 722:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 723:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(diffCount > I2C_I2C_FIFO_SIZE) /* Proceed transaction */
 413              		.loc 1 723 0
 414 0230 0828     		cmp	r0, #8
 415 0232 02D9     		bls	.L36
 724:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 21


 725:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     diffCount   = I2C_I2C_FIFO_SIZE;
 726:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     endTransfer = 0u;  /* Continue active transfer */
 416              		.loc 1 726 0
 417 0234 0024     		movs	r4, #0
 725:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     endTransfer = 0u;  /* Continue active transfer */
 418              		.loc 1 725 0
 419 0236 0820     		movs	r0, #8
 420              	.LVL13:
 421 0238 0EE0     		b	.L26
 422              	.LVL14:
 423              	.L36:
 727:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 728:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 else /* End when FIFO becomes FULL again */
 729:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 730:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     endTransfer = I2C_I2C_CMPLT_ANY_TRANSFER;
 424              		.loc 1 730 0
 425 023a 0124     		movs	r4, #1
 426 023c 0CE0     		b	.L26
 427              	.LVL15:
 428              	.L27:
 731:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 732:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 733:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 for(; (0u != diffCount); diffCount--)
 734:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 735:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Put data in component buffer */
 736:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slWrBufPtr[I2C_slWrBufIndex] = (uint8) I2C_RX_FIFO_RD_REG;
 429              		.loc 1 736 0 discriminator 2
 430 023e 4A4B     		ldr	r3, .L37+60
 431 0240 1A68     		ldr	r2, [r3]
 432 0242 4A49     		ldr	r1, .L37+64
 433 0244 0968     		ldr	r1, [r1]
 434 0246 8A18     		adds	r2, r1, r2
 435 0248 4949     		ldr	r1, .L37+68
 436 024a 0968     		ldr	r1, [r1]
 437 024c C9B2     		uxtb	r1, r1
 438 024e 1170     		strb	r1, [r2]
 737:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slWrBufIndex++;
 439              		.loc 1 737 0 discriminator 2
 440 0250 1A68     		ldr	r2, [r3]
 441 0252 0132     		adds	r2, r2, #1
 442 0254 1A60     		str	r2, [r3]
 733:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 443              		.loc 1 733 0 discriminator 2
 444 0256 0138     		subs	r0, r0, #1
 445              	.LVL16:
 446              	.L26:
 733:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 447              		.loc 1 733 0 is_stmt 0 discriminator 1
 448 0258 0028     		cmp	r0, #0
 449 025a F0D1     		bne	.L27
 738:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 739:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 740:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(0u != endTransfer) /* End transfer sending NACK */
 450              		.loc 1 740 0 is_stmt 1
 451 025c 002C     		cmp	r4, #0
 452 025e 08D0     		beq	.L28
 741:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 22


 742:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_ENABLE_SLAVE_AUTO_DATA_NACK;
 453              		.loc 1 742 0
 454 0260 404A     		ldr	r2, .L37+56
 455 0262 1368     		ldr	r3, [r2]
 456 0264 8021     		movs	r1, #128
 457 0266 0902     		lsls	r1, r1, #8
 458 0268 0B43     		orrs	r3, r1
 459 026a 1360     		str	r3, [r2]
 743:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 744:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* INTR_RX_FULL triggers earlier than INTR_SLAVE_I2C_STOP:
 745:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     * disable all RX interrupt sources.
 746:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     */
 747:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_SetRxInterruptMode(I2C_NO_INTR_SOURCES);
 460              		.loc 1 747 0
 461 026c 0022     		movs	r2, #0
 462 026e 444B     		ldr	r3, .L37+84
 463 0270 1A60     		str	r2, [r3]
 464              	.L28:
 748:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 749:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 750:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearRxInterruptSource(I2C_INTR_RX_FULL);
 465              		.loc 1 750 0
 466 0272 0822     		movs	r2, #8
 467 0274 414B     		ldr	r3, .L37+80
 468 0276 1A60     		str	r2, [r3]
 469 0278 25E0     		b	.L29
 470              	.LVL17:
 471              	.L24:
 751:Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 752:Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* I2C_INTR_RX_NOT_EMPTY:
 753:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The buffer size is less than 8: it requires processing in byte-by-byte mode.
 754:Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 755:Generated_Source\PSoC4/I2C_I2C_INT.c ****             else if(I2C_CHECK_INTR_RX_MASKED(I2C_INTR_RX_NOT_EMPTY))
 472              		.loc 1 755 0
 473 027a 494B     		ldr	r3, .L37+116
 474 027c 1B68     		ldr	r3, [r3]
 475 027e 5B07     		lsls	r3, r3, #29
 476 0280 21D5     		bpl	.L29
 756:Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 757:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 diffCount = I2C_RX_FIFO_RD_REG;
 477              		.loc 1 757 0
 478 0282 3B4B     		ldr	r3, .L37+68
 479 0284 1B68     		ldr	r3, [r3]
 480              	.LVL18:
 758:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 759:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 if(I2C_slWrBufIndex < I2C_slWrBufSize)
 481              		.loc 1 759 0
 482 0286 384A     		ldr	r2, .L37+60
 483 0288 1168     		ldr	r1, [r2]
 484 028a 414A     		ldr	r2, .L37+100
 485 028c 1268     		ldr	r2, [r2]
 486 028e 9142     		cmp	r1, r2
 487 0290 0DD2     		bcs	.L30
 760:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 761:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_I2C_SLAVE_GENERATE_ACK;
 488              		.loc 1 761 0
 489 0292 0121     		movs	r1, #1
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 23


 490 0294 414A     		ldr	r2, .L37+112
 491 0296 1160     		str	r1, [r2]
 762:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 763:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Put data into component buffer */
 764:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slWrBufPtr[I2C_slWrBufIndex] = (uint8) diffCount;
 492              		.loc 1 764 0
 493 0298 334A     		ldr	r2, .L37+60
 494 029a 1168     		ldr	r1, [r2]
 495 029c 3348     		ldr	r0, .L37+64
 496 029e 0068     		ldr	r0, [r0]
 497 02a0 4118     		adds	r1, r0, r1
 498 02a2 DBB2     		uxtb	r3, r3
 499              	.LVL19:
 500 02a4 0B70     		strb	r3, [r1]
 765:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slWrBufIndex++;
 501              		.loc 1 765 0
 502 02a6 1368     		ldr	r3, [r2]
 503 02a8 0133     		adds	r3, r3, #1
 504 02aa 1360     		str	r3, [r2]
 505 02ac 08E0     		b	.L31
 506              	.LVL20:
 507              	.L30:
 766:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 767:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 else /* Overflow: there is no space in write buffer */
 768:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 769:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_I2C_SLAVE_GENERATE_NACK;
 508              		.loc 1 769 0
 509 02ae 0222     		movs	r2, #2
 510 02b0 3A4B     		ldr	r3, .L37+112
 511              	.LVL21:
 512 02b2 1A60     		str	r2, [r3]
 770:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 771:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     I2C_slStatus |= (uint8) I2C_I2C_SSTAT_WR_OVFL;
 513              		.loc 1 771 0
 514 02b4 224A     		ldr	r2, .L37+20
 515 02b6 1178     		ldrb	r1, [r2]
 516 02b8 4023     		movs	r3, #64
 517 02ba 0B43     		orrs	r3, r1
 518 02bc DBB2     		uxtb	r3, r3
 519 02be 1370     		strb	r3, [r2]
 520              	.L31:
 772:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 773:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 774:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearRxInterruptSource(I2C_INTR_RX_NOT_EMPTY);
 521              		.loc 1 774 0
 522 02c0 0422     		movs	r2, #4
 523 02c2 2E4B     		ldr	r3, .L37+80
 524 02c4 1A60     		str	r2, [r3]
 525              	.LVL22:
 526              	.L29:
 775:Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 776:Generated_Source\PSoC4/I2C_I2C_INT.c ****             else
 777:Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 778:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 /* Does nothing */
 779:Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 780:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 781:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 24


 782:Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* I2C_INTR_TX_EMPTY:
 783:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The master reads the slave: provide data to read or 0xFF in the case of the end of th
 784:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * The overflow condition must be captured, but not set until the end of transaction.
 785:Generated_Source\PSoC4/I2C_I2C_INT.c ****             * There is a possibility of a false overflow due to TX FIFO utilization.
 786:Generated_Source\PSoC4/I2C_I2C_INT.c ****             */
 787:Generated_Source\PSoC4/I2C_I2C_INT.c ****             if(I2C_CHECK_INTR_TX_MASKED(I2C_INTR_TX_EMPTY))
 527              		.loc 1 787 0
 528 02c6 374B     		ldr	r3, .L37+120
 529 02c8 1B68     		ldr	r3, [r3]
 530 02ca DB06     		lsls	r3, r3, #27
 531 02cc 20D4     		bmi	.L32
 532 02ce 2BE0     		b	.L1
 533              	.L35:
 788:Generated_Source\PSoC4/I2C_I2C_INT.c ****             {
 789:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 while(I2C_I2C_FIFO_SIZE != I2C_GET_TX_FIFO_ENTRIES)
 790:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 791:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Temporary slRdBufIndexTmp is used because the master can NACK the byte and
 792:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     * index roll-back is required in this case. The slRdBufIndex is updated at the 
 793:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     * of the read transfer.
 794:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     */
 795:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     if(I2C_slRdBufIndexTmp < I2C_slRdBufSize)
 534              		.loc 1 795 0
 535 02d0 1F4B     		ldr	r3, .L37+36
 536 02d2 1A68     		ldr	r2, [r3]
 537 02d4 344B     		ldr	r3, .L37+124
 538 02d6 1B68     		ldr	r3, [r3]
 539 02d8 9A42     		cmp	r2, r3
 540 02da 0CD2     		bcs	.L33
 796:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Data from buffer */
 797:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 798:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_TX_FIFO_WR_REG = (uint32) I2C_slRdBufPtr[I2C_slRdBufIndexTmp];
 541              		.loc 1 798 0
 542 02dc 1C4B     		ldr	r3, .L37+36
 543 02de 1A68     		ldr	r2, [r3]
 544 02e0 3249     		ldr	r1, .L37+128
 545 02e2 0968     		ldr	r1, [r1]
 546 02e4 8A18     		adds	r2, r1, r2
 547 02e6 1278     		ldrb	r2, [r2]
 548 02e8 D2B2     		uxtb	r2, r2
 549 02ea 3149     		ldr	r1, .L37+132
 550 02ec 0A60     		str	r2, [r1]
 799:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_slRdBufIndexTmp++;
 551              		.loc 1 799 0
 552 02ee 1A68     		ldr	r2, [r3]
 553 02f0 0132     		adds	r2, r2, #1
 554 02f2 1A60     		str	r2, [r3]
 555 02f4 0CE0     		b	.L32
 556              	.L33:
 800:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 801:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     else
 802:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     /* Probably Overflow */
 803:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     {
 804:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         I2C_TX_FIFO_WR_REG = I2C_I2C_SLAVE_OVFL_RETURN;
 557              		.loc 1 804 0
 558 02f6 FF22     		movs	r2, #255
 559 02f8 2D4B     		ldr	r3, .L37+132
 560 02fa 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 25


 805:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 806:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         if(I2C_slOverFlowCount <= I2C_I2C_TX_OVERFLOW_COUNT)
 561              		.loc 1 806 0
 562 02fc 134B     		ldr	r3, .L37+32
 563 02fe 1B78     		ldrb	r3, [r3]
 564 0300 DBB2     		uxtb	r3, r3
 565 0302 0A2B     		cmp	r3, #10
 566 0304 04D8     		bhi	.L32
 807:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         {
 808:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             /* Get counter in range of overflow. */
 809:Generated_Source\PSoC4/I2C_I2C_INT.c ****                             I2C_slOverFlowCount++;
 567              		.loc 1 809 0
 568 0306 114A     		ldr	r2, .L37+32
 569 0308 1378     		ldrb	r3, [r2]
 570 030a 0133     		adds	r3, r3, #1
 571 030c DBB2     		uxtb	r3, r3
 572 030e 1370     		strb	r3, [r2]
 573              	.L32:
 789:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 {
 574              		.loc 1 789 0
 575 0310 0D4B     		ldr	r3, .L37+28
 576 0312 1B68     		ldr	r3, [r3]
 577 0314 1F22     		movs	r2, #31
 578 0316 1340     		ands	r3, r2
 579 0318 082B     		cmp	r3, #8
 580 031a D9D1     		bne	.L35
 810:Generated_Source\PSoC4/I2C_I2C_INT.c ****                         }
 811:Generated_Source\PSoC4/I2C_I2C_INT.c ****                     }
 812:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 }
 813:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 814:Generated_Source\PSoC4/I2C_I2C_INT.c ****                 I2C_ClearTxInterruptSource(I2C_INTR_TX_EMPTY);
 581              		.loc 1 814 0
 582 031c 0F3A     		subs	r2, r2, #15
 583 031e 254B     		ldr	r3, .L37+136
 584 0320 1A60     		str	r2, [r3]
 585 0322 01E0     		b	.L1
 586              	.LVL23:
 587              	.L8:
 815:Generated_Source\PSoC4/I2C_I2C_INT.c ****             }
 816:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 817:Generated_Source\PSoC4/I2C_I2C_INT.c ****         }  /* (I2C_I2C_SLAVE) */
 818:Generated_Source\PSoC4/I2C_I2C_INT.c ****         #endif
 819:Generated_Source\PSoC4/I2C_I2C_INT.c ****     }
 820:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 821:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 822:Generated_Source\PSoC4/I2C_I2C_INT.c ****     /* FSM EXIT:
 823:Generated_Source\PSoC4/I2C_I2C_INT.c ****     * Slave:  INTR_SLAVE_I2C_BUS_ERROR, INTR_SLAVE_I2C_ARB_LOST
 824:Generated_Source\PSoC4/I2C_I2C_INT.c ****     * Master: INTR_MASTER_I2C_BUS_ERROR, INTR_MASTER_I2C_ARB_LOST.
 825:Generated_Source\PSoC4/I2C_I2C_INT.c ****     */
 826:Generated_Source\PSoC4/I2C_I2C_INT.c ****     else
 827:Generated_Source\PSoC4/I2C_I2C_INT.c ****     {
 828:Generated_Source\PSoC4/I2C_I2C_INT.c ****         I2C_I2CFwBlockReset();
 588              		.loc 1 828 0
 589 0324 FFF7FEFF 		bl	I2C_I2CFwBlockReset
 590              	.LVL24:
 591              	.L1:
 829:Generated_Source\PSoC4/I2C_I2C_INT.c ****         
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 26


 830:Generated_Source\PSoC4/I2C_I2C_INT.c ****     #ifdef I2C_I2C_SLAVE_CMPLT_CALLBACK
 831:Generated_Source\PSoC4/I2C_I2C_INT.c ****         #if(I2C_I2C_SLAVE)
 832:Generated_Source\PSoC4/I2C_I2C_INT.c ****         {
 833:Generated_Source\PSoC4/I2C_I2C_INT.c ****             /* Error condition: read or write complete is set */
 834:Generated_Source\PSoC4/I2C_I2C_INT.c ****             I2C_I2C_SlaveCompleteCallback();
 835:Generated_Source\PSoC4/I2C_I2C_INT.c ****         }
 836:Generated_Source\PSoC4/I2C_I2C_INT.c ****         #endif
 837:Generated_Source\PSoC4/I2C_I2C_INT.c ****     #endif /* I2C_I2C_SLAVE_CMPLT_CALLBACK */
 838:Generated_Source\PSoC4/I2C_I2C_INT.c ****     }
 839:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 840:Generated_Source\PSoC4/I2C_I2C_INT.c **** #ifdef I2C_I2C_ISR_EXIT_CALLBACK
 841:Generated_Source\PSoC4/I2C_I2C_INT.c ****     I2C_I2C_ISR_ExitCallback();
 842:Generated_Source\PSoC4/I2C_I2C_INT.c **** #endif /* I2C_I2C_ISR_EXIT_CALLBACK */
 843:Generated_Source\PSoC4/I2C_I2C_INT.c **** 
 844:Generated_Source\PSoC4/I2C_I2C_INT.c **** }
 592              		.loc 1 844 0
 593              		@ sp needed
 594 0328 10BD     		pop	{r4, pc}
 595              	.L38:
 596 032a C046     		.align	2
 597              	.L37:
 598 032c 00000000 		.word	I2C_customIntrHandler
 599 0330 8C0E2440 		.word	1076104844
 600 0334 880E2440 		.word	1076104840
 601 0338 00000000 		.word	I2C_state
 602 033c 4C0F2440 		.word	1076105036
 603 0340 00000000 		.word	I2C_slStatus
 604 0344 400F2440 		.word	1076105024
 605 0348 08022440 		.word	1076101640
 606 034c 00000000 		.word	I2C_slOverFlowCount
 607 0350 00000000 		.word	I2C_slRdBufIndexTmp
 608 0354 00000000 		.word	I2C_slRdBufIndex
 609 0358 880F2440 		.word	1076105096
 610 035c 04022440 		.word	1076101636
 611 0360 FFFFFEFF 		.word	-65537
 612 0364 60002440 		.word	1076101216
 613 0368 00000000 		.word	I2C_slWrBufIndex
 614 036c 00000000 		.word	I2C_slWrBufPtr
 615 0370 40032440 		.word	1076101952
 616 0374 08032440 		.word	1076101896
 617 0378 FF5FFFFF 		.word	-40961
 618 037c C00F2440 		.word	1076105152
 619 0380 C80F2440 		.word	1076105160
 620 0384 ED0F0000 		.word	4077
 621 0388 800E2440 		.word	1076104832
 622 038c 64002440 		.word	1076101220
 623 0390 00000000 		.word	I2C_slWrBufSize
 624 0394 FF0F0000 		.word	4095
 625 0398 480F2440 		.word	1076105032
 626 039c 6C002440 		.word	1076101228
 627 03a0 CC0F2440 		.word	1076105164
 628 03a4 8C0F2440 		.word	1076105100
 629 03a8 00000000 		.word	I2C_slRdBufSize
 630 03ac 00000000 		.word	I2C_slRdBufPtr
 631 03b0 40022440 		.word	1076101696
 632 03b4 800F2440 		.word	1076105088
 633              		.cfi_endproc
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 27


 634              	.LFE1:
 635              		.size	I2C_I2C_ISR, .-I2C_I2C_ISR
 636              		.text
 637              	.Letext0:
 638              		.file 2 "Generated_Source\\PSoC4/cytypes.h"
 639              		.file 3 "Generated_Source\\PSoC4\\I2C_PVT.h"
 640              		.file 4 "Generated_Source\\PSoC4\\I2C_I2C_PVT.h"
 641              		.section	.debug_info,"",%progbits
 642              	.Ldebug_info0:
 643 0000 93010000 		.4byte	0x193
 644 0004 0400     		.2byte	0x4
 645 0006 00000000 		.4byte	.Ldebug_abbrev0
 646 000a 04       		.byte	0x4
 647 000b 01       		.uleb128 0x1
 648 000c 3B010000 		.4byte	.LASF31
 649 0010 0C       		.byte	0xc
 650 0011 41020000 		.4byte	.LASF32
 651 0015 F4010000 		.4byte	.LASF33
 652 0019 00000000 		.4byte	.Ldebug_ranges0+0
 653 001d 00000000 		.4byte	0
 654 0021 00000000 		.4byte	.Ldebug_line0
 655 0025 02       		.uleb128 0x2
 656 0026 01       		.byte	0x1
 657 0027 06       		.byte	0x6
 658 0028 96020000 		.4byte	.LASF0
 659 002c 02       		.uleb128 0x2
 660 002d 01       		.byte	0x1
 661 002e 08       		.byte	0x8
 662 002f 62000000 		.4byte	.LASF1
 663 0033 02       		.uleb128 0x2
 664 0034 02       		.byte	0x2
 665 0035 05       		.byte	0x5
 666 0036 E9000000 		.4byte	.LASF2
 667 003a 02       		.uleb128 0x2
 668 003b 02       		.byte	0x2
 669 003c 07       		.byte	0x7
 670 003d 06000000 		.4byte	.LASF3
 671 0041 02       		.uleb128 0x2
 672 0042 04       		.byte	0x4
 673 0043 05       		.byte	0x5
 674 0044 81020000 		.4byte	.LASF4
 675 0048 02       		.uleb128 0x2
 676 0049 04       		.byte	0x4
 677 004a 07       		.byte	0x7
 678 004b 7F000000 		.4byte	.LASF5
 679 004f 02       		.uleb128 0x2
 680 0050 08       		.byte	0x8
 681 0051 05       		.byte	0x5
 682 0052 E1010000 		.4byte	.LASF6
 683 0056 02       		.uleb128 0x2
 684 0057 08       		.byte	0x8
 685 0058 07       		.byte	0x7
 686 0059 07010000 		.4byte	.LASF7
 687 005d 03       		.uleb128 0x3
 688 005e 04       		.byte	0x4
 689 005f 05       		.byte	0x5
 690 0060 696E7400 		.ascii	"int\000"
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 28


 691 0064 02       		.uleb128 0x2
 692 0065 04       		.byte	0x4
 693 0066 07       		.byte	0x7
 694 0067 FA000000 		.4byte	.LASF8
 695 006b 04       		.uleb128 0x4
 696 006c 9B000000 		.4byte	.LASF9
 697 0070 02       		.byte	0x2
 698 0071 E401     		.2byte	0x1e4
 699 0073 2C000000 		.4byte	0x2c
 700 0077 04       		.uleb128 0x4
 701 0078 F3000000 		.4byte	.LASF10
 702 007c 02       		.byte	0x2
 703 007d E601     		.2byte	0x1e6
 704 007f 48000000 		.4byte	0x48
 705 0083 02       		.uleb128 0x2
 706 0084 04       		.byte	0x4
 707 0085 04       		.byte	0x4
 708 0086 3B000000 		.4byte	.LASF11
 709 008a 02       		.uleb128 0x2
 710 008b 08       		.byte	0x8
 711 008c 04       		.byte	0x4
 712 008d D1000000 		.4byte	.LASF12
 713 0091 02       		.uleb128 0x2
 714 0092 01       		.byte	0x1
 715 0093 08       		.byte	0x8
 716 0094 EF010000 		.4byte	.LASF13
 717 0098 05       		.uleb128 0x5
 718 0099 6B000000 		.4byte	0x6b
 719 009d 04       		.uleb128 0x4
 720 009e 00000000 		.4byte	.LASF14
 721 00a2 02       		.byte	0x2
 722 00a3 9002     		.2byte	0x290
 723 00a5 A9000000 		.4byte	0xa9
 724 00a9 05       		.uleb128 0x5
 725 00aa 77000000 		.4byte	0x77
 726 00ae 04       		.uleb128 0x4
 727 00af 1E010000 		.4byte	.LASF15
 728 00b3 02       		.byte	0x2
 729 00b4 A002     		.2byte	0x2a0
 730 00b6 BA000000 		.4byte	0xba
 731 00ba 06       		.uleb128 0x6
 732 00bb 04       		.byte	0x4
 733 00bc C0000000 		.4byte	0xc0
 734 00c0 07       		.uleb128 0x7
 735 00c1 02       		.uleb128 0x2
 736 00c2 08       		.byte	0x8
 737 00c3 04       		.byte	0x4
 738 00c4 8A020000 		.4byte	.LASF16
 739 00c8 02       		.uleb128 0x2
 740 00c9 04       		.byte	0x4
 741 00ca 07       		.byte	0x7
 742 00cb D8010000 		.4byte	.LASF17
 743 00cf 08       		.uleb128 0x8
 744 00d0 C5000000 		.4byte	.LASF34
 745 00d4 01       		.byte	0x1
 746 00d5 1F       		.byte	0x1f
 747 00d6 00000000 		.4byte	.LFB1
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 29


 748 00da B8030000 		.4byte	.LFE1-.LFB1
 749 00de 01       		.uleb128 0x1
 750 00df 9C       		.byte	0x9c
 751 00e0 0C010000 		.4byte	0x10c
 752 00e4 09       		.uleb128 0x9
 753 00e5 91000000 		.4byte	.LASF18
 754 00e9 01       		.byte	0x1
 755 00ea 21       		.byte	0x21
 756 00eb 77000000 		.4byte	0x77
 757 00ef 00000000 		.4byte	.LLST0
 758 00f3 09       		.uleb128 0x9
 759 00f4 19000000 		.4byte	.LASF19
 760 00f8 01       		.byte	0x1
 761 00f9 22       		.byte	0x22
 762 00fa 77000000 		.4byte	0x77
 763 00fe 6B000000 		.4byte	.LLST1
 764 0102 0A       		.uleb128 0xa
 765 0103 28030000 		.4byte	.LVL24
 766 0107 8B010000 		.4byte	0x18b
 767 010b 00       		.byte	0
 768 010c 0B       		.uleb128 0xb
 769 010d 25000000 		.4byte	.LASF20
 770 0111 03       		.byte	0x3
 771 0112 3B       		.byte	0x3b
 772 0113 AE000000 		.4byte	0xae
 773 0117 0B       		.uleb128 0xb
 774 0118 77020000 		.4byte	.LASF21
 775 011c 04       		.byte	0x4
 776 011d 1E       		.byte	0x1e
 777 011e 98000000 		.4byte	0x98
 778 0122 0B       		.uleb128 0xb
 779 0123 55000000 		.4byte	.LASF22
 780 0127 04       		.byte	0x4
 781 0128 21       		.byte	0x21
 782 0129 98000000 		.4byte	0x98
 783 012d 0B       		.uleb128 0xb
 784 012e C9010000 		.4byte	.LASF23
 785 0132 04       		.byte	0x4
 786 0133 24       		.byte	0x24
 787 0134 38010000 		.4byte	0x138
 788 0138 06       		.uleb128 0x6
 789 0139 04       		.byte	0x4
 790 013a 98000000 		.4byte	0x98
 791 013e 0B       		.uleb128 0xb
 792 013f 2B010000 		.4byte	.LASF24
 793 0143 04       		.byte	0x4
 794 0144 25       		.byte	0x25
 795 0145 A9000000 		.4byte	0xa9
 796 0149 0B       		.uleb128 0xb
 797 014a D8000000 		.4byte	.LASF25
 798 014e 04       		.byte	0x4
 799 014f 26       		.byte	0x26
 800 0150 A9000000 		.4byte	0xa9
 801 0154 0B       		.uleb128 0xb
 802 0155 70000000 		.4byte	.LASF26
 803 0159 04       		.byte	0x4
 804 015a 29       		.byte	0x29
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 30


 805 015b 38010000 		.4byte	0x138
 806 015f 0B       		.uleb128 0xb
 807 0160 A1000000 		.4byte	.LASF27
 808 0164 04       		.byte	0x4
 809 0165 2A       		.byte	0x2a
 810 0166 A9000000 		.4byte	0xa9
 811 016a 0B       		.uleb128 0xb
 812 016b 66020000 		.4byte	.LASF28
 813 016f 04       		.byte	0x4
 814 0170 2B       		.byte	0x2b
 815 0171 A9000000 		.4byte	0xa9
 816 0175 0B       		.uleb128 0xb
 817 0176 A2020000 		.4byte	.LASF29
 818 017a 04       		.byte	0x4
 819 017b 2C       		.byte	0x2c
 820 017c A9000000 		.4byte	0xa9
 821 0180 0B       		.uleb128 0xb
 822 0181 B1000000 		.4byte	.LASF30
 823 0185 04       		.byte	0x4
 824 0186 2D       		.byte	0x2d
 825 0187 98000000 		.4byte	0x98
 826 018b 0C       		.uleb128 0xc
 827 018c 41000000 		.4byte	.LASF35
 828 0190 41000000 		.4byte	.LASF35
 829 0194 04       		.byte	0x4
 830 0195 4D       		.byte	0x4d
 831 0196 00       		.byte	0
 832              		.section	.debug_abbrev,"",%progbits
 833              	.Ldebug_abbrev0:
 834 0000 01       		.uleb128 0x1
 835 0001 11       		.uleb128 0x11
 836 0002 01       		.byte	0x1
 837 0003 25       		.uleb128 0x25
 838 0004 0E       		.uleb128 0xe
 839 0005 13       		.uleb128 0x13
 840 0006 0B       		.uleb128 0xb
 841 0007 03       		.uleb128 0x3
 842 0008 0E       		.uleb128 0xe
 843 0009 1B       		.uleb128 0x1b
 844 000a 0E       		.uleb128 0xe
 845 000b 55       		.uleb128 0x55
 846 000c 17       		.uleb128 0x17
 847 000d 11       		.uleb128 0x11
 848 000e 01       		.uleb128 0x1
 849 000f 10       		.uleb128 0x10
 850 0010 17       		.uleb128 0x17
 851 0011 00       		.byte	0
 852 0012 00       		.byte	0
 853 0013 02       		.uleb128 0x2
 854 0014 24       		.uleb128 0x24
 855 0015 00       		.byte	0
 856 0016 0B       		.uleb128 0xb
 857 0017 0B       		.uleb128 0xb
 858 0018 3E       		.uleb128 0x3e
 859 0019 0B       		.uleb128 0xb
 860 001a 03       		.uleb128 0x3
 861 001b 0E       		.uleb128 0xe
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 31


 862 001c 00       		.byte	0
 863 001d 00       		.byte	0
 864 001e 03       		.uleb128 0x3
 865 001f 24       		.uleb128 0x24
 866 0020 00       		.byte	0
 867 0021 0B       		.uleb128 0xb
 868 0022 0B       		.uleb128 0xb
 869 0023 3E       		.uleb128 0x3e
 870 0024 0B       		.uleb128 0xb
 871 0025 03       		.uleb128 0x3
 872 0026 08       		.uleb128 0x8
 873 0027 00       		.byte	0
 874 0028 00       		.byte	0
 875 0029 04       		.uleb128 0x4
 876 002a 16       		.uleb128 0x16
 877 002b 00       		.byte	0
 878 002c 03       		.uleb128 0x3
 879 002d 0E       		.uleb128 0xe
 880 002e 3A       		.uleb128 0x3a
 881 002f 0B       		.uleb128 0xb
 882 0030 3B       		.uleb128 0x3b
 883 0031 05       		.uleb128 0x5
 884 0032 49       		.uleb128 0x49
 885 0033 13       		.uleb128 0x13
 886 0034 00       		.byte	0
 887 0035 00       		.byte	0
 888 0036 05       		.uleb128 0x5
 889 0037 35       		.uleb128 0x35
 890 0038 00       		.byte	0
 891 0039 49       		.uleb128 0x49
 892 003a 13       		.uleb128 0x13
 893 003b 00       		.byte	0
 894 003c 00       		.byte	0
 895 003d 06       		.uleb128 0x6
 896 003e 0F       		.uleb128 0xf
 897 003f 00       		.byte	0
 898 0040 0B       		.uleb128 0xb
 899 0041 0B       		.uleb128 0xb
 900 0042 49       		.uleb128 0x49
 901 0043 13       		.uleb128 0x13
 902 0044 00       		.byte	0
 903 0045 00       		.byte	0
 904 0046 07       		.uleb128 0x7
 905 0047 15       		.uleb128 0x15
 906 0048 00       		.byte	0
 907 0049 27       		.uleb128 0x27
 908 004a 19       		.uleb128 0x19
 909 004b 00       		.byte	0
 910 004c 00       		.byte	0
 911 004d 08       		.uleb128 0x8
 912 004e 2E       		.uleb128 0x2e
 913 004f 01       		.byte	0x1
 914 0050 3F       		.uleb128 0x3f
 915 0051 19       		.uleb128 0x19
 916 0052 03       		.uleb128 0x3
 917 0053 0E       		.uleb128 0xe
 918 0054 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 32


 919 0055 0B       		.uleb128 0xb
 920 0056 3B       		.uleb128 0x3b
 921 0057 0B       		.uleb128 0xb
 922 0058 27       		.uleb128 0x27
 923 0059 19       		.uleb128 0x19
 924 005a 11       		.uleb128 0x11
 925 005b 01       		.uleb128 0x1
 926 005c 12       		.uleb128 0x12
 927 005d 06       		.uleb128 0x6
 928 005e 40       		.uleb128 0x40
 929 005f 18       		.uleb128 0x18
 930 0060 9642     		.uleb128 0x2116
 931 0062 19       		.uleb128 0x19
 932 0063 01       		.uleb128 0x1
 933 0064 13       		.uleb128 0x13
 934 0065 00       		.byte	0
 935 0066 00       		.byte	0
 936 0067 09       		.uleb128 0x9
 937 0068 34       		.uleb128 0x34
 938 0069 00       		.byte	0
 939 006a 03       		.uleb128 0x3
 940 006b 0E       		.uleb128 0xe
 941 006c 3A       		.uleb128 0x3a
 942 006d 0B       		.uleb128 0xb
 943 006e 3B       		.uleb128 0x3b
 944 006f 0B       		.uleb128 0xb
 945 0070 49       		.uleb128 0x49
 946 0071 13       		.uleb128 0x13
 947 0072 02       		.uleb128 0x2
 948 0073 17       		.uleb128 0x17
 949 0074 00       		.byte	0
 950 0075 00       		.byte	0
 951 0076 0A       		.uleb128 0xa
 952 0077 898201   		.uleb128 0x4109
 953 007a 00       		.byte	0
 954 007b 11       		.uleb128 0x11
 955 007c 01       		.uleb128 0x1
 956 007d 31       		.uleb128 0x31
 957 007e 13       		.uleb128 0x13
 958 007f 00       		.byte	0
 959 0080 00       		.byte	0
 960 0081 0B       		.uleb128 0xb
 961 0082 34       		.uleb128 0x34
 962 0083 00       		.byte	0
 963 0084 03       		.uleb128 0x3
 964 0085 0E       		.uleb128 0xe
 965 0086 3A       		.uleb128 0x3a
 966 0087 0B       		.uleb128 0xb
 967 0088 3B       		.uleb128 0x3b
 968 0089 0B       		.uleb128 0xb
 969 008a 49       		.uleb128 0x49
 970 008b 13       		.uleb128 0x13
 971 008c 3F       		.uleb128 0x3f
 972 008d 19       		.uleb128 0x19
 973 008e 3C       		.uleb128 0x3c
 974 008f 19       		.uleb128 0x19
 975 0090 00       		.byte	0
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 33


 976 0091 00       		.byte	0
 977 0092 0C       		.uleb128 0xc
 978 0093 2E       		.uleb128 0x2e
 979 0094 00       		.byte	0
 980 0095 3F       		.uleb128 0x3f
 981 0096 19       		.uleb128 0x19
 982 0097 3C       		.uleb128 0x3c
 983 0098 19       		.uleb128 0x19
 984 0099 6E       		.uleb128 0x6e
 985 009a 0E       		.uleb128 0xe
 986 009b 03       		.uleb128 0x3
 987 009c 0E       		.uleb128 0xe
 988 009d 3A       		.uleb128 0x3a
 989 009e 0B       		.uleb128 0xb
 990 009f 3B       		.uleb128 0x3b
 991 00a0 0B       		.uleb128 0xb
 992 00a1 00       		.byte	0
 993 00a2 00       		.byte	0
 994 00a3 00       		.byte	0
 995              		.section	.debug_loc,"",%progbits
 996              	.Ldebug_loc0:
 997              	.LLST0:
 998 0000 A0000000 		.4byte	.LVL2
 999 0004 B0000000 		.4byte	.LVL3
 1000 0008 0100     		.2byte	0x1
 1001 000a 53       		.byte	0x53
 1002 000b B8000000 		.4byte	.LVL4
 1003 000f BE000000 		.4byte	.LVL5
 1004 0013 0100     		.2byte	0x1
 1005 0015 53       		.byte	0x53
 1006 0016 C4010000 		.4byte	.LVL6
 1007 001a CC010000 		.4byte	.LVL7
 1008 001e 0100     		.2byte	0x1
 1009 0020 53       		.byte	0x53
 1010 0021 D0010000 		.4byte	.LVL8
 1011 0025 D8010000 		.4byte	.LVL9
 1012 0029 0100     		.2byte	0x1
 1013 002b 53       		.byte	0x53
 1014 002c E2010000 		.4byte	.LVL10
 1015 0030 E6010000 		.4byte	.LVL11
 1016 0034 0100     		.2byte	0x1
 1017 0036 53       		.byte	0x53
 1018 0037 30020000 		.4byte	.LVL12
 1019 003b 38020000 		.4byte	.LVL13
 1020 003f 0100     		.2byte	0x1
 1021 0041 50       		.byte	0x50
 1022 0042 3A020000 		.4byte	.LVL14
 1023 0046 7A020000 		.4byte	.LVL17
 1024 004a 0100     		.2byte	0x1
 1025 004c 50       		.byte	0x50
 1026 004d 86020000 		.4byte	.LVL18
 1027 0051 A4020000 		.4byte	.LVL19
 1028 0055 0100     		.2byte	0x1
 1029 0057 53       		.byte	0x53
 1030 0058 AE020000 		.4byte	.LVL20
 1031 005c B2020000 		.4byte	.LVL21
 1032 0060 0100     		.2byte	0x1
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 34


 1033 0062 53       		.byte	0x53
 1034 0063 00000000 		.4byte	0
 1035 0067 00000000 		.4byte	0
 1036              	.LLST1:
 1037 006b 02000000 		.4byte	.LVL0
 1038 006f 3E020000 		.4byte	.LVL15
 1039 0073 0200     		.2byte	0x2
 1040 0075 30       		.byte	0x30
 1041 0076 9F       		.byte	0x9f
 1042 0077 3E020000 		.4byte	.LVL15
 1043 007b 7A020000 		.4byte	.LVL17
 1044 007f 0100     		.2byte	0x1
 1045 0081 54       		.byte	0x54
 1046 0082 7A020000 		.4byte	.LVL17
 1047 0086 C6020000 		.4byte	.LVL22
 1048 008a 0200     		.2byte	0x2
 1049 008c 30       		.byte	0x30
 1050 008d 9F       		.byte	0x9f
 1051 008e 24030000 		.4byte	.LVL23
 1052 0092 28030000 		.4byte	.LVL24
 1053 0096 0200     		.2byte	0x2
 1054 0098 30       		.byte	0x30
 1055 0099 9F       		.byte	0x9f
 1056 009a 00000000 		.4byte	0
 1057 009e 00000000 		.4byte	0
 1058              		.section	.debug_aranges,"",%progbits
 1059 0000 1C000000 		.4byte	0x1c
 1060 0004 0200     		.2byte	0x2
 1061 0006 00000000 		.4byte	.Ldebug_info0
 1062 000a 04       		.byte	0x4
 1063 000b 00       		.byte	0
 1064 000c 0000     		.2byte	0
 1065 000e 0000     		.2byte	0
 1066 0010 00000000 		.4byte	.LFB1
 1067 0014 B8030000 		.4byte	.LFE1-.LFB1
 1068 0018 00000000 		.4byte	0
 1069 001c 00000000 		.4byte	0
 1070              		.section	.debug_ranges,"",%progbits
 1071              	.Ldebug_ranges0:
 1072 0000 00000000 		.4byte	.LFB1
 1073 0004 B8030000 		.4byte	.LFE1
 1074 0008 00000000 		.4byte	0
 1075 000c 00000000 		.4byte	0
 1076              		.section	.debug_line,"",%progbits
 1077              	.Ldebug_line0:
 1078 0000 1A010000 		.section	.debug_str,"MS",%progbits,1
 1078      02006600 
 1078      00000201 
 1078      FB0E0D00 
 1078      01010101 
 1079              	.LASF14:
 1080 0000 72656733 		.ascii	"reg32\000"
 1080      3200
 1081              	.LASF3:
 1082 0006 73686F72 		.ascii	"short unsigned int\000"
 1082      7420756E 
 1082      7369676E 
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 35


 1082      65642069 
 1082      6E7400
 1083              	.LASF19:
 1084 0019 656E6454 		.ascii	"endTransfer\000"
 1084      72616E73 
 1084      66657200 
 1085              	.LASF20:
 1086 0025 4932435F 		.ascii	"I2C_customIntrHandler\000"
 1086      63757374 
 1086      6F6D496E 
 1086      74724861 
 1086      6E646C65 
 1087              	.LASF11:
 1088 003b 666C6F61 		.ascii	"float\000"
 1088      7400
 1089              	.LASF35:
 1090 0041 4932435F 		.ascii	"I2C_I2CFwBlockReset\000"
 1090      49324346 
 1090      77426C6F 
 1090      636B5265 
 1090      73657400 
 1091              	.LASF22:
 1092 0055 4932435F 		.ascii	"I2C_slStatus\000"
 1092      736C5374 
 1092      61747573 
 1092      00
 1093              	.LASF1:
 1094 0062 756E7369 		.ascii	"unsigned char\000"
 1094      676E6564 
 1094      20636861 
 1094      7200
 1095              	.LASF26:
 1096 0070 4932435F 		.ascii	"I2C_slRdBufPtr\000"
 1096      736C5264 
 1096      42756650 
 1096      747200
 1097              	.LASF5:
 1098 007f 6C6F6E67 		.ascii	"long unsigned int\000"
 1098      20756E73 
 1098      69676E65 
 1098      6420696E 
 1098      7400
 1099              	.LASF18:
 1100 0091 64696666 		.ascii	"diffCount\000"
 1100      436F756E 
 1100      7400
 1101              	.LASF9:
 1102 009b 75696E74 		.ascii	"uint8\000"
 1102      3800
 1103              	.LASF27:
 1104 00a1 4932435F 		.ascii	"I2C_slRdBufSize\000"
 1104      736C5264 
 1104      42756653 
 1104      697A6500 
 1105              	.LASF30:
 1106 00b1 4932435F 		.ascii	"I2C_slOverFlowCount\000"
 1106      736C4F76 
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 36


 1106      6572466C 
 1106      6F77436F 
 1106      756E7400 
 1107              	.LASF34:
 1108 00c5 4932435F 		.ascii	"I2C_I2C_ISR\000"
 1108      4932435F 
 1108      49535200 
 1109              	.LASF12:
 1110 00d1 646F7562 		.ascii	"double\000"
 1110      6C6500
 1111              	.LASF25:
 1112 00d8 4932435F 		.ascii	"I2C_slWrBufIndex\000"
 1112      736C5772 
 1112      42756649 
 1112      6E646578 
 1112      00
 1113              	.LASF2:
 1114 00e9 73686F72 		.ascii	"short int\000"
 1114      7420696E 
 1114      7400
 1115              	.LASF10:
 1116 00f3 75696E74 		.ascii	"uint32\000"
 1116      333200
 1117              	.LASF8:
 1118 00fa 756E7369 		.ascii	"unsigned int\000"
 1118      676E6564 
 1118      20696E74 
 1118      00
 1119              	.LASF7:
 1120 0107 6C6F6E67 		.ascii	"long long unsigned int\000"
 1120      206C6F6E 
 1120      6720756E 
 1120      7369676E 
 1120      65642069 
 1121              	.LASF15:
 1122 011e 63796973 		.ascii	"cyisraddress\000"
 1122      72616464 
 1122      72657373 
 1122      00
 1123              	.LASF24:
 1124 012b 4932435F 		.ascii	"I2C_slWrBufSize\000"
 1124      736C5772 
 1124      42756653 
 1124      697A6500 
 1125              	.LASF31:
 1126 013b 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1126      43313120 
 1126      352E342E 
 1126      31203230 
 1126      31363036 
 1127 016e 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 1127      20726576 
 1127      6973696F 
 1127      6E203233 
 1127      37373135 
 1128 01a1 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1128      66756E63 
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 37


 1128      74696F6E 
 1128      2D736563 
 1128      74696F6E 
 1129              	.LASF23:
 1130 01c9 4932435F 		.ascii	"I2C_slWrBufPtr\000"
 1130      736C5772 
 1130      42756650 
 1130      747200
 1131              	.LASF17:
 1132 01d8 73697A65 		.ascii	"sizetype\000"
 1132      74797065 
 1132      00
 1133              	.LASF6:
 1134 01e1 6C6F6E67 		.ascii	"long long int\000"
 1134      206C6F6E 
 1134      6720696E 
 1134      7400
 1135              	.LASF13:
 1136 01ef 63686172 		.ascii	"char\000"
 1136      00
 1137              	.LASF33:
 1138 01f4 433A5C55 		.ascii	"C:\\Users\\Larry\\Documents\\PSoC Creator\\bwsi\\ba"
 1138      73657273 
 1138      5C4C6172 
 1138      72795C44 
 1138      6F63756D 
 1139 0221 6E6B2D70 		.ascii	"nk-protocol\\bank-protocol.cydsn\000"
 1139      726F746F 
 1139      636F6C5C 
 1139      62616E6B 
 1139      2D70726F 
 1140              	.LASF32:
 1141 0241 47656E65 		.ascii	"Generated_Source\\PSoC4\\I2C_I2C_INT.c\000"
 1141      72617465 
 1141      645F536F 
 1141      75726365 
 1141      5C50536F 
 1142              	.LASF28:
 1143 0266 4932435F 		.ascii	"I2C_slRdBufIndex\000"
 1143      736C5264 
 1143      42756649 
 1143      6E646578 
 1143      00
 1144              	.LASF21:
 1145 0277 4932435F 		.ascii	"I2C_state\000"
 1145      73746174 
 1145      6500
 1146              	.LASF4:
 1147 0281 6C6F6E67 		.ascii	"long int\000"
 1147      20696E74 
 1147      00
 1148              	.LASF16:
 1149 028a 6C6F6E67 		.ascii	"long double\000"
 1149      20646F75 
 1149      626C6500 
 1150              	.LASF0:
 1151 0296 7369676E 		.ascii	"signed char\000"
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccyymAfy.s 			page 38


 1151      65642063 
 1151      68617200 
 1152              	.LASF29:
 1153 02a2 4932435F 		.ascii	"I2C_slRdBufIndexTmp\000"
 1153      736C5264 
 1153      42756649 
 1153      6E646578 
 1153      546D7000 
 1154              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
